$breakpoints: (
  'small': 767px,
  'medium': 992px,
  'large': 1200,
) !default;

// Mixin for responsive scss
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Typography mixin
@mixin responsive-font-size($size, $height, $sm-size, $sm-height, $selectors...) {
  @for $i from 0 to length($selectors) {
    $selector: nth($selectors, $i + 1);

    #{$selector} {
      font-size: $size;
      line-height: $height;
    }

    @include respond-to('small') {
      #{$selector} {
        font-size: $sm-size;
        line-height: $sm-height;
      }
    }
  }
}

// TODO: create mixin for generating classes for margin and padding
